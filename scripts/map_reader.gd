extends Node
class_name MapReader

# Handles reading in QR-esque text files (or, on the web, pretending to).

var qr_map:Array[Array] = []
var map_pick:int
var map_size:int
	
# Only supports the smaller 25 x 25 QR code right now. Will need updating if
# you want to use a larger one.
func read_map(file_path: String) -> Array[Array]:
	var map:Array[Array] = []
	
	var file = FileAccess.open(file_path, FileAccess.READ)
	var text = file.get_as_text()
	var lines = text.split("\n")
	
	for line in lines:
		var map_line:Array = []
		for i in range(line.length()):
			map_line.append(int(line[i]))
		if (map_line.size() > 0):
			map.append(map_line)
	
	print("Map: " + text)
	
	for i in range(10):
		map[24][i + 14] = 0
		map[i + 14][24] = 0
	map[24][24] = 0
	
	for y in range(25):
		var row = ""
		for x in range(25):
			row += str(map[y][x])
		print(row)
	
	return map

# Returns a doubled-pixel QR code map. (E.g., a 25 x 25 pixel QR code will be a 50 x 50 map.)
func read_map_web() -> Array[Array]:
	
	var map = pick_a_hardcoded_map()
	
	var double_map:Array[Array]
	for i in range(map_size):
		var double_row_one:Array[int]
		var double_row_two:Array[int]
		for j in range(map_size):
			if is_qr_code_vault(i, j):
				double_row_one.append(map[i][j])
				double_row_one.append(map[i][j])
				double_row_two.append(map[i][j])
				double_row_two.append(map[i][j])
			else:
				var wall_draw = randi_range(0, 5) if map[i][j] == 1 else 6
				if wall_draw == 0:
					double_row_one.append(2)
				else:
					double_row_one.append(map[i][j])
				if wall_draw == 1:
					double_row_one.append(2)
				else:
					double_row_one.append(map[i][j])
				if wall_draw == 2:
					double_row_two.append(2)
				else:
					double_row_two.append(map[i][j])
				if wall_draw == 3:
					double_row_two.append(2)
				else:
					double_row_two.append(map[i][j])
					
					
		double_map.append(double_row_one)
		double_map.append(double_row_two)
	
	qr_map.clear()
	for i in range(map_size):
		var qr_row_one:Array[int]
		var qr_row_two:Array[int]
		for j in range(map_size):
			qr_row_one.append(map[i][j])
			qr_row_one.append(map[i][j])
			qr_row_two.append(map[i][j])
			qr_row_two.append(map[i][j])
		qr_map.append(qr_row_one)
		qr_map.append(qr_row_two)
	
	
	return double_map

func is_qr_code_vault(i: int, j: int) -> bool:
	var horizontal_wall = ((i >= 0 && i < 14) || (i >= map_size - 14 && i < map_size)) \
			&& (j == 0 || j == 1 || j == 12 || j == 13 || j == map_size - 14 || j == map_size - 13 || j == map_size - 2 || j == map_size - 1)
	var vert_wall = ((j >= 0 && j < 14) || (j >= map_size - 14 && j < map_size)) \
			&& (i == 0 || i == 1 || i == 12 || i == 13 || i == map_size - 14 || i == map_size - 13 || i == map_size - 2 || i == map_size - 1)		
	var top_left_vault = i >= 4 && i <= 10 && j >= 4 && j <= 10
	var bottom_left_vault = i >= 4 && i <= 10 && j >= map_size - 10 && j <= map_size - 4
	var top_right_vault = i >= map_size - 10 && i <= map_size - 4 && j >= 4 && j <= 10
	
	return horizontal_wall || vert_wall || top_left_vault || bottom_left_vault || top_right_vault

func pick_a_hardcoded_map() -> Array[Array]:
	map_pick = 1# randi_range(0, 3)
	print(map_pick)
	var map:Array[Array] = []
	match map_pick:
		0:
			map = [[1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1], \
				   [1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1], \
				   [1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1], \
				   [1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1], \
				   [1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,1], \
	  			   [1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1], \
				   [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1], \
				   [0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0], \
				   [1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0], \
				   [1,1,0,1,0,1,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,0,1,0], \
				   [0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1], \
				   [1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1], \
				   [0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1], \
				   [1,1,1,1,0,1,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0], \
				   [1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1], \
				   [1,0,1,0,1,1,0,1,1,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1], \
				   [1,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0], \
				   [0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0], \
				   [1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,1,1], \
				   [1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,1,1], \
				   [1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0], \
				   [1,0,1,1,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1], \
				   [1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,1], \
				   [1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1], \
				   [1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1]]
			map_size = 25
		1: 
			map = [[1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1],
				   [1,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1],
				   [1,0,1,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,0,1],
				   [1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0,1],
				   [1,0,1,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1],
				   [1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1],
				   [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
				   [0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0],
				   [1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0],
				   [1,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1],
				   [1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0],
				   [1,0,0,1,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0],
				   [0,1,1,0,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,0],
				   [1,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1],
				   [1,1,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,0],
				   [0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0],
				   [1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0],
				   [1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1],
				   [1,0,0,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0],
				   [1,0,1,0,1,1,0,1,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,0,0,0,1,0],
				   [1,0,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1],
				   [0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0],
				   [1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0],
				   [1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0],
				   [1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0],
				   [1,0,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0],
				   [1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0],
				   [1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0],
				   [1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0]]
			map_size = 29
		2: 
			map = [[1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1],
				   [1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1],
				   [1,0,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1],
				   [1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,1],
				   [1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,0,1],
				   [1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1],
				   [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
				   [0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0],
				   [1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,1,1,1,1,1,0,0],
				   [1,0,1,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1],
				   [0,0,0,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0],
				   [0,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,0],
				   [1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,1,0,0],
				   [0,0,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1],
				   [1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,0,0],
				   [0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,0],
				   [0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0],
				   [1,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1],
				   [1,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0],
				   [1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,0,0,1,0],
				   [1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1],
				   [0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0],
				   [1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0],
				   [1,0,0,0,0,0,1,0,1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0],
				   [1,0,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0],
				   [1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0],
				   [1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0],
				   [1,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,1,0,0,0,1,1,0,0,0,1,0,1,0],
				   [1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0]]
			map_size = 29
		3: 
			map = [[1,1,1,1,1,1,1,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1],
				   [1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,1],
				   [1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1],
				   [1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,0,1,0,1,1,1,0,1],
				   [1,0,1,1,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1],
				   [1,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1],
				   [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
				   [0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0],
				   [1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0],
				   [0,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1],
				   [0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0],
				   [0,1,0,1,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,1,0],
				   [1,1,0,1,0,0,1,1,0,1,1,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,0,0],
				   [0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1],
				   [1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,0],
				   [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0],
				   [1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,0,0],
				   [1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1],
				   [1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0],
				   [1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0],
				   [1,0,1,1,0,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,1,1,1],
				   [0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0],
				   [1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,1,1,1,0,0],
				   [1,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0],
				   [1,0,1,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0],
				   [1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0],
				   [1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0],
				   [1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,1,0],
				   [1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0]]
			map_size = 29
	
	var clear_size = 8
	for i in range(8):
		map[map_size - 1][map_size - 1 - clear_size + i] = 0
		map[map_size - 1 - clear_size + i][map_size - 1] = 0
	map[map_size - 1][map_size - 1] = 0
	return map
